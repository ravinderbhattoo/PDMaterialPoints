var documenterSearchIndex = {"docs":
[{"location":"toc.html#Table-of-contents","page":"Table of contents","title":"Table of contents","text":"","category":"section"},{"location":"toc.html","page":"Table of contents","title":"Table of contents","text":"Pages = [\n            \"index.md\",\n            \"examples.md\",\n            \"list.md\"\n        ]\nDepth = 3","category":"page"},{"location":"examples.html#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Output files can be visualized using Ovito software.","category":"page"},{"location":"examples.html#Cone","page":"Examples","title":"Cone","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"This Julia code creates a material-point-geometry of a cone and saves it to a file called cone.data in the output directory.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using PDMaterialPoints: imports the PDMaterialPoints package, which provides a set of functions for creating and manipulating 3D material-point-geometries.\nprintln(\"Creating Cone...\"): prints a message to the console indicating that the material-point-geometry creation process has started.\nout = create(Cone(10.0, 20.0), resolution=0.5, rand_=0.0): creates a material-point-geometry of a cone with a base radius of 10.0 and a height of 20.0 using the create function provided by PDMaterialPoints. The resolution argument controls the material-point-geometry resolution, and the rand_ argument controls the amount of random noise to add to the material-point-geometry vertices (in this case, no noise is added).\nwrite_data(\"./output/cone.data\", out): writes the material-point-geometry data stored in out to a file called cone.data in the output directory. The data is stored in a format that can be read by various visualization software packages.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using PDMaterialPoints\nprintln(\"Creating Cone...\")\nout = create(Cone(10.0, 20.0), resolution=0.5, rand_=0.0)\nwrite_data(\"./output/cone.data\", out)","category":"page"},{"location":"examples.html#Cylinder","page":"Examples","title":"Cylinder","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"This code creates a 3D cylinder using the create function. The Cylinder function is used to define the geometry of the cylinder. It takes three arguments:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"The radius of the cylinder, which is set to 10.0.\nThe height of the cylinder, which is set to 3.0.\nThe number of segments used to create the cylinder, which is set to 100.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"The create function is then called with the cylinder object as the first argument. The second argument, resolution, specifies the desired resolution of the material point geometry, which is set to 0.5 in this case. The third argument, rand_, specifies the randomness of the material point geometry, which is set to 0.0 in this case.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Finally, the write_data function is called to write the material-point-geometry data to a file. The first argument is the path and filename of the output file, which is set to \"./output/cylinder.data\". The second argument is the material-point-geometry data object returned by the create function.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using PDMaterialPoints\nprintln(\"Creating Cylinder...\")\nout = create(Cylinder(10.0, 3.0, 100.0), resolution=0.5, rand_=0.0)\nwrite_data(\"./output/cylinder.data\", out)","category":"page"},{"location":"examples.html#Sphere","page":"Examples","title":"Sphere","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"The create function is called to generate the sphere. This function takes in two arguments: the first is the shape of the object to be created (in this case, a Sphere with a radius of 10.0), and the second argument is a resolution parameter, which controls the level of detail in the material-point-geometry. The smaller the resolution value, the finer the material-point-geometry.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"The create function returns a material-point-geometry object, which is stored in the out variable.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Finally, the write_data function is called to write the material-point-geometry data to a file called \"sphere.data\" in the \"./output\" directory.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using PDMaterialPoints\nprintln(\"Creating Sphere...\")\nout = create(Sphere(10.0), resolution=0.5, rand_=0.0)\nwrite_data(\"./output/sphere.data\", out)","category":"page"},{"location":"examples.html#Notched-Bar","page":"Examples","title":"Notched Bar","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"This code generates a notched bar shape. A cuboid is created using the Cuboid function, which takes as input a matrix with the ranges of the x, y, and z axes of the cuboid. In this case, the cuboid has ranges of -10 to 10 in the x-axis, 0 to 3 in the y-axis, and -2 to 2 in the z-axis. This creates a cuboid with a rectangular prism shape.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Next, a function f is defined that takes in the out dictionary that contains information about the material point geometry, including the coordinates x and the type of each point in the material-point-geometry. The function returns a boolean mask that is true for the points that meet the specified condition. In this case, f masks all points that have an x-coordinate between -0.1 and 0.1 and a y-coordinate greater than 2.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"The delete function is then called on the obj cuboid using f as the input. This deletes all the points in the material-point-geometry that satisfy the boolean mask generated by f, which creates a notch in the bar shape.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Finally, the create function is called on the modified obj material-point-geometry to create a new material-point-geometry with a higher resolution (0.1) and no randomness in the material-point-geometry (rand_=0.0). The type of each point is set to 1 (type=1). The resulting material-point-geometry is written to a data file named \"notched_bar.data\" in the \"./output\" directory.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using PDMaterialPoints\nprintln(\"Creating Notched Bar...\")\nobj = Cuboid([-10 10; 0 3; -2 2])\nf = out -> begin\n    x=out[:x];\n    mask = (x[1, :] .< 0.1) .& (x[1, :] .> -0.1) .& (x[2, :] .> 2)\n    mask\nend\nobj = delete(obj, f)\n\nout = create(obj, resolution=0.1, rand_=0.0, type=1)\nwrite_data(\"./output/notched_bar.data\", out)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"<img src=\"assets/examples/bar.png\" style=\"width:80%;background-color:white;display:block;margin:auto\"/>","category":"page"},{"location":"examples.html#Composite","page":"Examples","title":"Composite","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"In this example, a Cuboid is created initially and then its type is modified using the changetype function inside the for loop.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"In each iteration of the loop, a new center and radius is generated randomly. The changetype function is then called to modify the obj by creating a boolean mask of the points inside a sphere with the generated center and radius. The mask is created using the Euclidean distance formula (x - center)^2 < radius^2. The mask is also modified to exclude any points that already have a type of 2, which in this case is the type for spheres.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"The changetype function is called with a type argument of 2 to set the type of the masked points to 2, which changes them to spheres. Since changetype modifies the obj in place, the obj variable is declared as global at the beginning of each loop iteration.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Finally, the create function is called on the modified obj with a resolution of 0.1 and a rand_ argument of 0.0 to create a material-point-geometry of the composite object. The material-point-geometry is then written to a file using the write_data function.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"println(\"Creating a composite...\")\nfunction rand_(a, b)\n    return a + rand()*(b-a)\nend\n\nobj = Cuboid([-10 10; -10 10; 0 3])\nfor i in 1:100\n    global obj\n    center = [rand_(-10, 10), rand_(-10, 10), rand_(0, 3)]\n    radius = 0.2 + 1.0*rand()\n    obj = changetype(obj, out -> begin x=out[:x]; mask = sum((x .- vec(center)).^2, dims=1) .< radius^2; mask .& (sum(out[:type][mask[1,:]] .== 2) == 0)  end, 2)\nend\n\nout = create(obj, resolution=0.1, rand_=0.0, type=1)\nwrite_data(\"./output/composite.data\", out)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"<img src=\"assets/examples/composite.png\" style=\"width:80%;background-color:white;display:block;margin:auto\"/>","category":"page"},{"location":"examples.html#Rotating-composite-strip","page":"Examples","title":"Rotating composite strip","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"In this example, a rotating strip is being created by repeatedly modifying a cuboid obj and adding it to the existing object by calling the combine method.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Initially, obj is set to be a cuboid with dimensions [-5 5; -10 10; 0 3].","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"In each iteration of the for-loop, obj is modified in the following ways:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"The changetype method is called twice to change the type of some of the point-particles. The first call changes the type of point-particles that satisfy the condition sum(x[1:2, :].^2, dims=1) .< 3.0^2 to 2, and the second call changes the type of point-particles that satisfy the condition sum(x[1:2, :].^2, dims=1) .< 2.0^2 to 3.\nThe move method is called to translate obj by [10.0, 0.0, 0.0].\nThe rotate method is called to rotate obj by an angle of 2 degrees around a point [0.0, 0.0, 0.0] and an axis vector [1.0, 1.0, 0.0].","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Finally, after the for-loop completes, create method is called to generate the material-point-geometry data for the combined object, with a resolution of 0.5 and no random noise, and the result is written to a file named strip.data.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"println(\"Creating rotating strip...\")\nusing PDMaterialPoints\nc = Cuboid([-5 5; -10 10; 0 3])\nobj = copy(c)\nfor i in 1:100\n    global obj\n    obj = changetype(obj, out -> begin x=out[:x]; sum(x[1:2, :].^2, dims=1) .< 3.0^2 end, 2)\n    obj = changetype(obj, out -> begin x=out[:x]; sum(x[1:2, :].^2, dims=1) .< 2.0^2 end, 3)\n    obj = move(obj, by=[10.0, 0.0, 0.0])\n    obj = rotate(obj, angle=2, point=[0.0, 0.0, 0.0], vector_=[1.0, 1.0, 0.0])\n    obj = combine(obj, c)\nend\n\nout = create(obj, resolution=0.5, rand_=0.0, type=1)\nwrite_data(\"./output/strip.data\", out)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"<img src=\"assets/examples/rotating_strip.png\" style=\"width:80%;background-color:white;display:block;margin:auto\"/>","category":"page"},{"location":"shapes.html#Shapes","page":"Shapes","title":"Shapes","text":"","category":"section"},{"location":"shapes.html","page":"Shapes","title":"Shapes","text":"This page lists the shapes that are available in PDMaterialPoints. These shapes can be used to create material-point-geometries (see create), which can then be used for simulations. The following shapes are available:","category":"page"},{"location":"shapes.html","page":"Shapes","title":"Shapes","text":"Cone\nCuboid\nCube\nCylinder\nDisk\nPyramid\nIndentor\nSphere","category":"page"},{"location":"indexlist.html#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"indexlist.html","page":"Index","title":"Index","text":"Modules = [PDMaterialPoints]","category":"page"},{"location":"index.html#PDMaterialPoints.jl","page":"Home","title":"PDMaterialPoints.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"<img src=\"assets/logo.png\" style=\"width:50%;background-color:white;display:block;margin:auto\"/>","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: Coverage) (Image: Generic badge)","category":"page"},{"location":"index.html#Functionality-of-PDMaterialPoints","page":"Home","title":"Functionality of PDMaterialPoints","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"PDMaterialPoints provides a set of tools to generate material-point-geometries of complex geometries and to perform various operations on them. Here are some of the main features:","category":"page"},{"location":"index.html#Shapes","page":"Home","title":"Shapes","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"PDMaterialPoints includes a variety of predefined shapes, such as Cuboid, Sphere, Cylinder, Cone, and more. These shapes can be created and modified using various parameters such as resolution, and randomness. For example, here is how to create a sphere:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using PDMaterialPoints\nsphere = create(Sphere(10.0), resolution=0.5, rand_=0.0)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"This will create a sphere with a radius of 10.0, a resolution of 0.5, and no randomness.","category":"page"},{"location":"index.html#Operations","page":"Home","title":"Operations","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"PDMaterialPoints provides several operations that can be performed on material-point-geometries, such as rotation, translation, deletion, and more. These operations can be used to modify the shape and position of a material-point-geometry. For example, here is how to rotate a material point geometry:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using PDMaterialPoints\ncube = create(Cube(10.0), resolution=0.5, rand_=0.0)\ncube_rotated = rotate(cube, angle=45, point=[0, 0, 0], vector_=[1, 0, 0])","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"This will create a cube and then rotate it 45 degrees around the x-axis.","category":"page"},{"location":"index.html#Combining-Shapes","page":"Home","title":"Combining Shapes","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"PDMaterialPoints allows for combining different shapes together to create more complex geometries. This can be achieved using the combine function. For example, here is how to combine two cubes:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using PDMaterialPoints\n\ncube1 = Cube(4.0)\ncube2 = move(Cube(2.0), by=[3.0, 0.0, 0.0])\n\ncombined = cube1 + cube2\n\nmpg =create(cube; resolution=0.5)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"This will create two cubes and then combine them into one.","category":"page"},{"location":"index.html#Changing-Material-point-gemetry-Types","page":"Home","title":"Changing Material point gemetry Types","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"PDMaterialPoints provides a changetype function to change the type of elements in a material-point-geometry. This can be used to modify the type of a material point. For example, here is how to change the type of all elements in a material-point-geometry to 2:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using PDMaterialPoints\nsphere = create(Sphere(10.0), resolution=0.5, rand_=0.0)\nsphere_type2 = changetype(sphere, out -> out[:x][1, :] .> 0.0, 2)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"This will create a sphere and then change the type of all half of particle to 2.","category":"page"},{"location":"index.html#Writing-to-File","page":"Home","title":"Writing to File","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Finally, PDMaterialPoints allows for writing material-point-geometries to file in xyz format, here is how to write a material-point-geometry to a XYZ file:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using PDMaterialPoints\nsphere = create(Sphere(10.0), resolution=0.5, rand_=0.0)\nwrite_data(\"./output/sphere.data\", out)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"This will create a sphere and then write it to a XYZ file.","category":"page"},{"location":"index.html#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Here are some examples of PDMaterialPoints in action:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Pages = [\n            \"examples.md\",\n        ]\nDepth = 3","category":"page"},{"location":"autodocs.html","page":"Autodocs","title":"Autodocs","text":"Autodocs are generated for PDMaterialPoints using Documenter.jl.","category":"page"},{"location":"autodocs.html","page":"Autodocs","title":"Autodocs","text":"Modules = [PDMaterialPoints]\nPrivate = false\nOrder = [:type, :function]","category":"page"},{"location":"autodocs.html#PDMaterialPoints.Cone","page":"Autodocs","title":"PDMaterialPoints.Cone","text":"Cone(radius::QF, length::QF)\n\nCone shape.\n\nFields\n\nradius::QF: Radius of the cone.\nlength::QF: Length of the cone.\n\nExample\n\nusing PDMaterialPoints\n\n# Create a cone\ncone = Cone(1.0, 1.0)\n\n# Create a material-point-geometry.\nmpg =create(cone; resolution=0.1, rand_=0.01, type=1)\n\nSee also\n\nStandardCone()\nCone()\ncreate\n\nReferences\n\nWikipedia\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PDMaterialPoints.Cone-Tuple{}","page":"Autodocs","title":"PDMaterialPoints.Cone","text":"Cone()\n\nCone shape. Radius and length are 1.0.\n\nsee also\n\nCone\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.Cuboid","page":"Autodocs","title":"PDMaterialPoints.Cuboid","text":"Cuboid(bounds::Array{QF, 2})\n\nCuboid shape.\n\nFields\n\nbounds::Array{QF, 2}: Bounds of the cuboid.\n\nExample\n\nusing PDMaterialPoints\n\n# Create a cuboid\ncuboid = Cuboid([0.0 1.0; 0.0 1.0; 0.0 1.0])\n\n# Create a material-point-geometry.\nmpg =create(cuboid)\n\nSee also\n\ncreate\n\nReferences\n\nWikipedia\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PDMaterialPoints.Cuboid-Tuple{}","page":"Autodocs","title":"PDMaterialPoints.Cuboid","text":"Cuboid()\n\nCuboid shape. Bounds are [-0.5 0.5; -0.5 0.5; -0.5 0.5]. Length is 1.0.\n\nsee also\n\ncreate\nStandardCuboid\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.Cylinder","page":"Autodocs","title":"PDMaterialPoints.Cylinder","text":"Cylinder\n\nCylinder shape.\n\nFields\n\nradius::QF: Radius of the cylinder.\nthickness::QF: Thickness of the cylinder.\nlength::QF: Length of the cylinder.\n\nExample\n\nusing PDMaterialPoints\n\n# Create a cylinder\ncylinder = Cylinder(1.0, 0.1, 2.0)\n\n# Create a material-point-geometry.\nmpg =create(cylinder, resolution=0.1)\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PDMaterialPoints.Disk","page":"Autodocs","title":"PDMaterialPoints.Disk","text":"Disk\n\nDisk shape.\n\nFields\n\nradius::QF: Radius of the disk.\nthickness::QF: Thickness of the disk.\n\nExample\n\nusing PDMaterialPoints\n\n# Create a disk\ndisk = Disk(1.0, 0.1)\n\n# Create a material-point-geometry.\nmpg =create(disk, resolution=0.1)\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PDMaterialPoints.PostOpObj","page":"Autodocs","title":"PDMaterialPoints.PostOpObj","text":"PostOpObj\n\nThese objects are used to create a post operation object (lazy) from object ( or post operation object)and an operation. Operations will be applied while a create call.\n\nFields\n\nname::String: Name of the object.\nobjs::Vector{Any}: Objects to be operated on.\noperations::Array{Function}: Operations to be applied.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PDMaterialPoints.Shape","page":"Autodocs","title":"PDMaterialPoints.Shape","text":"Shape\n\nAbstract type for shapes.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PDMaterialPoints.Shell","page":"Autodocs","title":"PDMaterialPoints.Shell","text":"Shell\n\nShell shape.\n\nFields\n\nouter_radius::QF: Outer radius of the shell.\ninner_radius::QF: Inner radius of the shell.\n\nExample\n\nusing PDMaterialPoints\n\n# Create a shell\nshell = Shell(1.0, 0.5)\n\n# Create a material-point-geometry.\nmpg =create(shell, resolution=0.1)\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PDMaterialPoints.Sphere","page":"Autodocs","title":"PDMaterialPoints.Sphere","text":"Sphere\n\nSphere shape.\n\nFields\n\nradius::QF: Radius of the sphere.\n\nExample\n\nusing PDMaterialPoints\n\n# Create a sphere\nsphere = Sphere(1.0)\n\n# Create a material-point-geometry.\nmpg =create(sphere, resolution=0.1)\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PDMaterialPoints.Cube-Tuple{Any}","page":"Autodocs","title":"PDMaterialPoints.Cube","text":"Cube(L)\n\nCube shape. A special case of Cuboid.\n\nArguments\n\nL::QF: Length of the cube.\n\nExample\n\nusing PDMaterialPoints\n\n# Create a cube\ncube = Cube(1.0)\n\n# Create a material-point-geometry.\nmpg =create(cube)\n\nSee also\n\ncreate\nCuboid\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.Cube-Tuple{}","page":"Autodocs","title":"PDMaterialPoints.Cube","text":"Cube()\n\nCube shape. A special case of Cuboid. Length is 1.0.\n\nsee also\n\ncreate\nStandardCuboid\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.Indentor-Tuple{Any, Any}","page":"Autodocs","title":"PDMaterialPoints.Indentor","text":"Indentor(angle, height; sides=3)\n\nIndentor shape. A special case of Pyramid.\n\nArguments\n\nangle::QF: Apex angle of the Indentor.\nheight::QF: Height of the Indentor.\n\nKeyword Arguments\n\nsides::Int: Number of sides of the Indentor.\n\nExample\n\nusing PDMaterialPoints\n\n# Create a Indentor\nIndentor = Indentor(60.0, 1.0)\n\n# Create a material-point-geometry.\nmpg =create(Indentor)\n\nSee also\n\ncreate\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.Pyramid-Tuple{Any, Any}","page":"Autodocs","title":"PDMaterialPoints.Pyramid","text":"Pyramid\n\nPyramid shape.\n\nArguments\n\nangle::QF: Apex angle of the Pyramid.\n\nExample\n\nusing PDMaterialPoints\n\n# Create a Pyramid\nPyramid = Pyramid(60.0)\n\n# Create a material-point-geometry.\nmpg =create(Pyramid)\n\nSee also\n\ncreate\n\nReferences\n\nWikipedia\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.StandardCone-Tuple{}","page":"Autodocs","title":"PDMaterialPoints.StandardCone","text":"StandardCone()\n\nStandard cone shape. A special case of Cone. Radius and length are 1.0.\n\nExample\n\nusing PDMaterialPoints\n\n# Create a standard cone\ncone = StandardCone()\n\n# Create a material-point-geometry.\nmpg =create(cone)\n\nSee also\n\nCone\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.StandardCuboid-Tuple{}","page":"Autodocs","title":"PDMaterialPoints.StandardCuboid","text":"StandardCuboid()\n\nStandard cuboid shape. A special case of Cuboid. Bounds are [-0.5 0.5; -0.5 0.5; -0.5 0.5]. Length is 1.0.\n\nExample\n\nusing PDMaterialPoints\n\n# Create a standard cuboid\ncuboid = StandardCuboid()\n\n# Create a material-point-geometry.\nmpg =create(cuboid)\n\nSee also\n\ncreate\nCuboid\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.StandardCylinder-Tuple{}","page":"Autodocs","title":"PDMaterialPoints.StandardCylinder","text":"StandardCylinder()\n\nStandard cylinder shape. A special case of Cylinder. Radius is 1.0. Thickness is 0.3. Length is 1.0.\n\nExample\n\nusing PDMaterialPoints\n\n# Create a standard cylinder\ncylinder = StandardCylinder()\n\n# Create a material-point-geometry.\nmpg =create(cylinder)\n\nSee also\n\ncreate\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.StandardDisk-Tuple{}","page":"Autodocs","title":"PDMaterialPoints.StandardDisk","text":"StandardDisk()\n\nStandard disk shape. A special case of Disk. Radius is 1.0. Thickness is 0.3.\n\nExample\n\nusing PDMaterialPoints\n\n# Create a standard disk\ndisk = StandardDisk()\n\n# Create a material-point-geometry.\nmpg =create(disk)\n\nSee also\n\ncreate\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.StandardSphere-Tuple{}","page":"Autodocs","title":"PDMaterialPoints.StandardSphere","text":"StandardSphere()\n\nStandard sphere shape. A special case of Sphere. Radius is 1.0.\n\nExample\n\nusing PDMaterialPoints\n\n# Create a standard sphere\nsphere = StandardSphere()\n\n# Create a material-point-geometry.\nmpg =create(sphere, resolution=0.1)\n\nSee also\n\ncreate\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.changetype-Tuple{Vector{Int64}, Any, Int64}","page":"Autodocs","title":"PDMaterialPoints.changetype","text":"changetype(type::Array{Int,1}, mask, ntype::Int)\n\nChange material point type for object using boolean array mask.\n\nArguments\n\ntype::Array{Int,1}: Array of particle types.\nmask: Boolean array.\nntype::Int: New particle type.\n\nReturns\n\ntype::Array{Int,1}: Array of particle types.\n\nSee also\n\nchangetype(obj::T, f::Function, ntype::Int) where T <: SuperShape\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.changetype-Union{Tuple{T}, Tuple{T, Function, Int64}} where T<:PDMaterialPoints.SuperShape","page":"Autodocs","title":"PDMaterialPoints.changetype","text":"changetype(obj::T, f::Function, ntype::Int) where T <: SuperShape\n\nChange material point type for object using function f.\n\nArguments\n\nobj::T: Object.\nf::Function: Function that returns a boolean array.\nntype::Int: New particle type.\n\nReturns\n\nobj::T: Object.\n\nSee also\n\nchangetype(type::Array{Int,1}, mask, ntype::Int)\n\nExample\n\nusing PDMaterialPoints\n\n# Create a disk\ndisk = Disk(1.0, 0.1)\n\n# Create a material-point-geometry.\nmpg =create(disk, resolution=0.1)\n\n# Change particle type\nmpg =changetype(mpg, out -> out['x'][:, 1] .> 0.0, 2)\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.combine-Tuple{Any, Any}","page":"Autodocs","title":"PDMaterialPoints.combine","text":"combine(obj1::T1, obj2::T2) where {T1<:SuperShape, T2<:SuperShape}\n\nCombine two objects. Duplicate of add.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.create-Tuple{Cone}","page":"Autodocs","title":"PDMaterialPoints.create","text":"create(c::Cone; resolution=nothing, rand_=0.0, type::Int=1)\n\nCreate a material-point-geometry of a cone.\n\nArguments\n\nc::Cone: Cone shape.\nresolution=nothing: Resolution of the material-point-geometry.\nrand_=0.0: Randomization factor.\ntype::Int=1: Type of the material-point-geometry.\n\nReturns\n\nDict: Material point gemetry.\n\nExample\n\nusing PDMaterialPoints\n\n# Create a cone\ncone = Cone(1.0, 1.0)\n\n# Create a material-point-geometry.\nmpg =create(cone)\n\nSee also\n\nCone\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.create-Tuple{Cuboid}","page":"Autodocs","title":"PDMaterialPoints.create","text":"create(c::Cuboid; resolution=nothing, rand_=0.0, type::Int=1)\n\nCreate a material-point-geometry of a cuboid.\n\nArguments\n\nc::Cuboid: Cuboid shape.\nresolution=nothing: Resolution of the material-point-geometry.\nrand_=0.0: Randomization factor.\ntype::Int=1: Type of the material-point-geometry.\n\nReturns\n\nDict: Material point gemetry.\n\nExample\n\nusing PDMaterialPoints\n\n# Create a cuboid\ncuboid = Cuboid([0.0 1.0; 0.0 1.0; 0.0 1.0])\n\n# Create a material-point-geometry.\nmpg =create(cuboid)\n\nSee also\n\nCuboid\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.create-Tuple{Cylinder}","page":"Autodocs","title":"PDMaterialPoints.create","text":"create(c::Cylinder; resolution=nothing, rand_=0.0, type::Int=1)\n\nCreate a material-point-geometry from a cylinder.\n\nArguments\n\nc::Cylinder: Cylinder object.\nresolution=nothing: Resolution of the material-point-geometry.\nrand_=0.0: Randomization factor.\ntype::Int=1: Type of the material-point-geometry.\n\nReturns\n\nout::Dict{Symbol, Any}: Dictionary containing the material-point-geometry data.\n\nExample\n\nusing PDMaterialPoints\n\n# Create a cylinder\ncylinder = Cylinder(1.0, 0.1, 2.0)\n\n# Create a material-point-geometry.\nmpg =create(cylinder, resolution=0.1)\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.create-Tuple{Disk}","page":"Autodocs","title":"PDMaterialPoints.create","text":"create(c::Disk; resolution=nothing, rand_=0.0, type::Int=1)\n\nCreate a material-point-geometry from a disk.\n\nArguments\n\nc::Disk: Disk object.\nresolution=nothing: Resolution of the material-point-geometry.\nrand_=0.0: Randomization factor.\ntype::Int=1: Type of the material-point-geometry.\n\nReturns\n\nout::Dict{Symbol, Any}: Dictionary containing the material-point-geometry data.\n\nExample\n\nusing PDMaterialPoints\n\n# Create a disk\ndisk = Disk(1.0, 0.1)\n\n# Create a material-point-geometry.\nmpg =create(disk, resolution=0.1)\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.create-Tuple{PostOpObj, Vararg{Any}}","page":"Autodocs","title":"PDMaterialPoints.create","text":"create(pobj::PostOpObj, args...; kwargs...)\n\nCreate a material-point-geometry from a post operation object.\n\nArguments\n\npobj::PostOpObj: Post operation object.\nargs...: Arguments to be passed to the create function.\nkwargs...: Keyword arguments to be passed to the create function.\n\nReturns\n\nout::Dict{Symbol, Any}: Dictionary containing the material-point-geometry data.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.create-Tuple{Sphere}","page":"Autodocs","title":"PDMaterialPoints.create","text":"create(s::Sphere; resolution=nothing, rand_=0.0, type::Int=1)\n\nCreate a material-point-geometry from a sphere or shell.\n\nArguments\n\ns::Sphere: Sphere object.\nresolution=nothing: Resolution of the material-point-geometry.\nrand_=0.0: Randomization factor.\ntype::Int=1: Type of the material-point-geometry.\n\nReturns\n\nout::Dict{Symbol, Any}: Dictionary containing the material-point-geometry data.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.create-Tuple{T} where T<:Shape","page":"Autodocs","title":"PDMaterialPoints.create","text":"create(shape::T; resolution=nothing, rand_=0.0, type::Int=1) where T <: Shape\n\nAbstact function for creating Shape objects.\n\nArguments\n\nshape::T: Shape object.\nresolution=nothing: Resolution of the material-point-geometry.\nrand_=0.0: Randomization factor.\ntype::Int=1: Type of the material-point-geometry.\n\nReturns\n\nout::Dict{Symbol, Any}: Dictionary containing the material-point-geometry data.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.delete-Union{Tuple{T}, Tuple{T, Function}} where T","page":"Autodocs","title":"PDMaterialPoints.delete","text":"delete(obj::T, f::Function) where T <: SuperShape\n\nDelete material points for object using function f.\n\nArguments\n\nobj::T: Object.\nf::Function: Function that returns a boolean array.\n\nReturns\n\nobj::T: Object.\n\nExample\n\nusing PDMaterialPoints\n\n# Create a disk\ndisk = Disk(1.0, 0.1)\n\n# Create a material-point-geometry.\nmpg =create(disk, resolution=0.1)\n\n# Delete particles\nmpg =delete(mpg, out -> out['x'][:, 1] .> 0.0)\n\nSee also\n\ndelete(out, mask::BitArray)\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.make-Tuple{T} where T<:PDMaterialPoints.SuperShape","page":"Autodocs","title":"PDMaterialPoints.make","text":"make(shape::T) where T <: Shape\n\nCreate a material-point-geometry from a shape. This function is a wrapper for the create function. It is used to create a material-point-geometry from a shape with default arguments.\n\nArguments\n\nshape::T: Shape object.\n\nReturns\n\nout::Dict{Symbol, Any}: Dictionary containing the material-point-geometry data.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.move-Tuple{Matrix{<:Union{Float64, Unitful.Quantity{Float64}}}}","page":"Autodocs","title":"PDMaterialPoints.move","text":"move(x::Array{QF,2}; by=[0.0, 0.0, 0.0])\n\nMove material points for object by given \"by\".\n\nArguments\n\nx::Array{QF,2}: Array of material points.\nby=[0.0, 0.0, 0.0]: Translation vector.\n\nReturns\n\nx::Array{QF,2}: Array of material points.\n\nSee also\n\nmove\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.move-Tuple{T} where T<:PDMaterialPoints.SuperShape","page":"Autodocs","title":"PDMaterialPoints.move","text":"move(obj::T; by=[0.0, 0.0, 0.0]) where T\n\nMove material points for object by given \"by\".\n\nArguments\n\nobj::T: Object.\nby=[0.0, 0.0, 0.0]: Translation vector.\n\nReturns\n\nobj::T: Object.\n\nExample\n\nusing PDMaterialPoints\n\n# Create a disk\ndisk = Disk(1.0, 0.1)\n\n# Create a material-point-geometry.\nmpg =create(disk, resolution=0.1)\n\n# Move particles\nmpg =move(mpg, by=[0.0, 0.0, 0.1])\n\nSee also\n\nmove\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.repack!-Tuple{Dict, Any, Any}","page":"Autodocs","title":"PDMaterialPoints.repack!","text":"repack!(d::Dict, keys_, vals)\n\nRepack a dictionary from its components inplace.\n\nArguments\n\nd::Dict: Dictionary to be repacked.\nkeys_: Keys of the dictionary.\nvals: Values of the dictionary.\n\nReturns\n\nd::Dict: Dictionary containing the components.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.repack-Tuple","page":"Autodocs","title":"PDMaterialPoints.repack","text":"repack(args...; keys_ = (:x, :v, :y, :volume, :type))\n\nRepack a dictionary from its components.\n\nArguments\n\nargs...: Components to be packed.\nkeys_ = (:x, :v, :y, :volume, :type): Keys of the dictionary.\n\nReturns\n\nd::Dict: Dictionary containing the components.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.rotate-Tuple{Matrix{<:Union{Float64, Unitful.Quantity{Float64}}}}","page":"Autodocs","title":"PDMaterialPoints.rotate","text":"rotate(x::Array{QF,2}; angle=0.0, point=[0.0, 0.0, 0.0], vector_=[1.0, 0.0, 0.0])\n\nRotate material points for object by given angle about given vector and point.\n\nArguments\n\nx::Array{QF,2}: Array of material points.\nangle=0.0: Rotation angle.\npoint=[0.0, 0.0, 0.0]: Rotation point.\nvector_=[1.0, 0.0, 0.0]: Rotation vector.\n\nReturns\n\nx::Array{QF,2}: Array of material points.\n\nSee also\n\nrotate\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.rotate-Tuple{T} where T<:PDMaterialPoints.SuperShape","page":"Autodocs","title":"PDMaterialPoints.rotate","text":"rotate(obj::T; angle=0.0, point=[0.0, 0.0, 0.0], vector_=[1.0, 0.0, 0.0]) where T <: SuperShape\n\nRotate shape object by given angle about given vector and point.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.unpack-Tuple{Dict}","page":"Autodocs","title":"PDMaterialPoints.unpack","text":"unpack(d::Dict)\n\nUnpack a dictionary into its components.\n\nArguments\n\nd::Dict: Dictionary to be unpacked.\n\nReturns\n\nx::Array{QF, 1}: x coordinates.\nv::Array{QF, 1}: v coordinates.\ny::Array{QF, 1}: y coordinates.\nvolume::Array{QF, 1}: Volume of the material-point-geometry.\ntype::Array{Int, 1}: Type of the material-point-geometry.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.velocity-Tuple{Matrix{Union{Float64, Unitful.Quantity{Float64}}}, Any, Matrix{Union{Float64, Unitful.Quantity{Float64}}}}","page":"Autodocs","title":"PDMaterialPoints.velocity","text":"velocity(v::Array{QF,2}; velocity=[0.0, 0.0, 0.0])\n\nChange velocity of particles for object by given \"velocity\".\n\nArguments\n\nv::Array{QF,2}: Array of material-point-geometry velocities.\nvelocity=[0.0, 0.0, 0.0]: Velocity vector.\n\nReturns\n\nv::Array{QF,2}: Array of material-point-geometry velocities.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.velocity-Tuple{Matrix{Union{Float64, Unitful.Quantity{Float64}}}, Any, Vector{Union{Float64, Unitful.Quantity{Float64}}}}","page":"Autodocs","title":"PDMaterialPoints.velocity","text":"velocity(v::Array{QF,2}; velocity=[0.0, 0.0, 0.0])\n\nChange velocity of particles for object by given \"velocity\".\n\nArguments\n\nv::Array{QF,2}: Array of material-point-geometry velocities.\nvelocity=[0.0, 0.0, 0.0]: Velocity vector.\n\nReturns\n\nv::Array{QF,2}: Array of material-point-geometry velocities.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.velocity-Union{Tuple{T}, Tuple{T, Function, Any}} where T<:PDMaterialPoints.SuperShape","page":"Autodocs","title":"PDMaterialPoints.velocity","text":"velocity(obj::T, f::Function, vel) where T <: SuperShape\n\nChange velocity of particles for object using boolean array from function f.\n\nArguments\n\nobj::T: Object.\nf::Function: Function that returns boolean array.\nvel: Velocity vector.\n\nReturns\n\nobj::T: Object.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.write_data-Tuple{String, Dict}","page":"Autodocs","title":"PDMaterialPoints.write_data","text":"write_data(filename::String, out::Dict)\n\nWrite data to a file in the following format:\n\n    N\n    # id, type, position, velocity, volume\n    1, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0\n    2, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0\n    3, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0\n    4, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0\n    5, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0\n\nwhere N is the number of particles, id is the particle id, type is the particle type,\nposition is the particle position, velocity is the particle velocity, and\nvolume is the particle volume.\n\nArguments\n\nfilename::String: Name of the file to write to.\nout::Dict: Dictionary containing the following keys:\n:x: Position of the particles.\n:v: Velocity of the particles.\n:type: Type of the particles.\n:volume: Volume of the particles.\n\nExample\n\nusing PDMaterialPoints\n\n# Create a cube\ncube = Cube(1.0, 1.0, 1.0)\n\n# Create a dictionary of the union\nout = create(cube)\n\n# Write the data to a file\nwrite_data(\"data.txt\", out)\n\nSee also\n\nwrite_data_peridigm\nwrite_data\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.write_data-Tuple{String, Matrix, Matrix, Vector, Vector}","page":"Autodocs","title":"PDMaterialPoints.write_data","text":"write_data(filename::String, x::Matrix, v::Matrix, type::Vector,  vol::Vector)\n\nWrite data to a file in the following format:\n\nN\n# id, type, position, velocity, volume\n1, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0\n2, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0\n3, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0\n4, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0\n5, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0\n\nwhere N is the number of particles, id is the particle id, type is the particle type, position is the particle position, velocity is the particle velocity, and volume is the particle volume.\n\nArguments\n\nfilename::String: Name of the file to write to.\nx::Matrix: Position of the particles.\nv::Matrix: Velocity of the particles.\ntype::Vector: Type of the particles.\nvol::Vector: Volume of the particles.\n\nsee also\n\nwrite_data\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.write_data-Tuple{String, PDMaterialPoints.SuperShape}","page":"Autodocs","title":"PDMaterialPoints.write_data","text":"write_data(filename::String, obj::SuperShape; kwargs...)\n\nWrite data to a file in the following format:\n\n    N\n    # id, type, position, velocity, volume\n    1, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0\n    2, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0\n    3, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0\n    4, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0\n    5, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0\n\nwhere N is the number of particles, id is the particle id, type is the particle type,\nposition is the particle position, velocity is the particle velocity, and\nvolume is the particle volume.\n\nArguments\n\nfilename::String: Name of the file to write to.\nobj::SuperShape: Shape or post operation object to write to file.\n\nKeyword Arguments\n\nkwargs...: Keyword arguments to pass to create.\n\nExample\n\nusing PDMaterialPoints\n\n# Create a cube\ncube = Cube(1.0, 1.0, 1.0)\n\n# Write the data to a file\nwrite_data(\"data.txt\", cube)\n\nSee also\n\nwrite_data_peridigm\nwrite_data\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.write_data_peridigm-Tuple{String, Matrix, Vector, Vector}","page":"Autodocs","title":"PDMaterialPoints.write_data_peridigm","text":"write_data_peridigm(filename::String, x::Matrix, type::Vector,  vol::Vector)\n\nWrite data to a file in the following format:\n\n    N\n    # position, type, volume\n    0.0, 0.0, 0.0, 1, 1.0\n    0.0, 0.0, 0.0, 1, 1.0\n    0.0, 0.0, 0.0, 1, 1.0\n    0.0, 0.0, 0.0, 1, 1.0\n    0.0, 0.0, 0.0, 1, 1.0\n\nwhere N is the number of particles, type is the particle type, position is the particle position, and volume is the particle volume.\n\nArguments\n\nfilename::String: Name of the file to write to.\nx::Matrix: Position of the particles.\ntype::Vector: Type of the particles.\nvol::Vector: Volume of the particles.\n\nsee also\n\nwrite_data\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html","page":"Autodocs","title":"Autodocs","text":"PDMaterialPoints.set_device \nPDMaterialPoints.get_valid_device \nPDMaterialPoints.keepit  \nPDMaterialPoints.reset_cuda  \nPDMaterialPoints.add  \nPDMaterialPoints.fhandle \nPDMaterialPoints.SuperShape","category":"page"},{"location":"autodocs.html#PDMaterialPoints.set_device","page":"Autodocs","title":"PDMaterialPoints.set_device","text":"set_device(device::Symbol)\n\nSet the device to use for computations. The device can be either :cpu or :cuda.\n\nArguments\n\ndevice::Symbol: Device to use for computations.\n\nExample\n\nusing PDMaterialPoints\n\n# Set the device to use for computations\nset_device(:cuda)\n\n\n\n\n\n","category":"function"},{"location":"autodocs.html#PDMaterialPoints.get_valid_device","page":"Autodocs","title":"PDMaterialPoints.get_valid_device","text":"get_valid_device(x::Symbol)\n\nGet a valid device. If x is :cuda and CUDA is not available, then :cpu is returned.\n\nArguments\n\nx::Symbol: Device to check.\n\n\n\n\n\n","category":"function"},{"location":"autodocs.html#PDMaterialPoints.keepit","page":"Autodocs","title":"PDMaterialPoints.keepit","text":"keepit(out, mask::BitArray)\n\nKeep material points for object using boolean array mask.\n\nArguments\n\nout: Material point gemetry data.\nmask::BitArray: Boolean array.\n\nReturns\n\nout: Material point gemetry data.\n\n\n\n\n\n","category":"function"},{"location":"autodocs.html#PDMaterialPoints.reset_cuda","page":"Autodocs","title":"PDMaterialPoints.reset_cuda","text":"reset_cuda()\n\nReset the device to :cuda. If CUDA is not available, then the device is set to :cpu.\n\n\n\n\n\n","category":"function"},{"location":"autodocs.html#PDMaterialPoints.add","page":"Autodocs","title":"PDMaterialPoints.add","text":"add(obj1::T1, obj2::T2) where {T1<:SuperShape, T2<:SuperShape}\n\nAdd two objects.\n\nArguments\n\nobj1::T1: First object.\nobj2::T2: Second object.\n\n\n\n\n\n","category":"function"},{"location":"autodocs.html#PDMaterialPoints.fhandle","page":"Autodocs","title":"PDMaterialPoints.fhandle","text":"fhandle(filename::String)\n\nCreate a file handle for a given filename.\n\nArguments\n\nfilename::String: Name of the file to create.\n\n\n\n\n\n","category":"function"},{"location":"autodocs.html#PDMaterialPoints.SuperShape","page":"Autodocs","title":"PDMaterialPoints.SuperShape","text":"SuperShape\n\nAbstract type for supershapes.\n\n\n\n\n\n","category":"type"},{"location":"operations.html#Operations","page":"Operations","title":"Operations","text":"","category":"section"},{"location":"operations.html","page":"Operations","title":"Operations","text":"This section lists the operations that can be performed on Shape and PostOpObj. These operations can be used to modify the shape and position of a material-point-geometry. For example, here is how to rotate a material point geometry:","category":"page"},{"location":"operations.html","page":"Operations","title":"Operations","text":"using PDMaterialPoints\ncube = create(Cube(10.0), resolution=0.5, rand_=0.0)\ncube_rotated = rotate(cube, angle=45, point=[0, 0, 0], vector_=[1, 0, 0])","category":"page"},{"location":"operations.html","page":"Operations","title":"Operations","text":"This will create a cube and then rotate it 45 degrees around the x-axis.","category":"page"},{"location":"operations.html","page":"Operations","title":"Operations","text":"Note that all the operations listed below are lazy and will be applied when create is called.","category":"page"},{"location":"operations.html","page":"Operations","title":"Operations","text":"create\nchangetype\ndelete\nmove\nrotate\nvelocity","category":"page"}]
}
