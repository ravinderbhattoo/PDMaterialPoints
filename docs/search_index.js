var documenterSearchIndex = {"docs":
[{"location":"toc.html#Table-of-contents","page":"Table of contents","title":"Table of contents","text":"","category":"section"},{"location":"toc.html","page":"Table of contents","title":"Table of contents","text":"Pages = [\r\n            \"index.md\",\r\n            \"examples.md\",\r\n            \"list.md\"\r\n        ]\r\nDepth = 3","category":"page"},{"location":"examples.html#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Output files can be visualized using Ovito software.","category":"page"},{"location":"examples.html#Cone","page":"Examples","title":"Cone","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using PDMesh\r\nprintln(\"Creating Cone...\")\r\nout = create(Cone(10.0, 20.0), resolution=0.5, rand_=0.0)\r\nwrite_data(\"./output/cone.data\", out)","category":"page"},{"location":"examples.html#Cylinder","page":"Examples","title":"Cylinder","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using PDMesh\r\nprintln(\"Creating Cylinder...\")\r\nout = create(Cylinder(10.0, 3.0, 100.0), resolution=0.5, rand_=0.0)\r\nwrite_data(\"./output/cylinder.data\", out)","category":"page"},{"location":"examples.html#Sphere","page":"Examples","title":"Sphere","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using PDMesh\r\nprintln(\"Creating Sphere...\")\r\nout = create(Sphere(10.0), resolution=0.5, rand_=0.0)\r\nwrite_data(\"./output/sphere.data\", out)","category":"page"},{"location":"examples.html#Notched-Bar","page":"Examples","title":"Notched Bar","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using PDMesh\r\nprintln(\"Creating Notched Bar...\")\r\nobj = Cuboid([-10 10; 0 3; -2 2])\r\nf = out -> begin\r\n    x=out[:x];\r\n    mask = (x[1, :] .< 0.1) .& (x[1, :] .> -0.1) .& (x[2, :] .> 2)\r\n    mask\r\nend\r\nobj = delete(obj, f)\r\n\r\nout = create(obj, resolution=0.1, rand_=0.0, type=1)\r\nwrite_data(\"./output/notched_bar.data\", out)","category":"page"},{"location":"examples.html#Composite","page":"Examples","title":"Composite","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"println(\"Creating a composite...\")\r\nfunction rand_(a, b)\r\n    return a + rand()*(b-a)\r\nend\r\n\r\nobj = Cuboid([-10 10; -10 10; 0 3])\r\nfor i in 1:100\r\n    global obj\r\n    center = [rand_(-10, 10), rand_(-10, 10), rand_(0, 3)]\r\n    radius = 0.2 + 1.0*rand()\r\n    obj = changetype(obj, out -> begin x=out[:x]; mask = sum((x .- vec(center)).^2, dims=1) .< radius^2; mask .& (sum(out[:type][mask[1,:]] .== 2) == 0)  end, 2)\r\nend\r\n\r\nout = create(obj, resolution=0.1, rand_=0.0, type=1)\r\nwrite_data(\"./output/composite.data\", out)","category":"page"},{"location":"examples.html#Rotating-composite-strip","page":"Examples","title":"Rotating composite strip","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"println(\"Creating rotating strip...\")\r\nusing PDMesh\r\nc = Cuboid([-5 5; -10 10; 0 3])\r\nobj = copy(c)\r\nfor i in 1:100\r\n    global obj\r\n    obj = changetype(obj, out -> begin x=out[:x]; sum(x[1:2, :].^2, dims=1) .< 3.0^2 end, 2)\r\n    obj = changetype(obj, out -> begin x=out[:x]; sum(x[1:2, :].^2, dims=1) .< 2.0^2 end, 3)\r\n    obj = move(obj, by=[10.0, 0.0, 0.0])\r\n    obj = rotate(obj, angle=2, point=[0.0, 0.0, 0.0], vector_=[1.0, 1.0, 0.0])\r\n    obj = combine(obj, c)\r\nend\r\n\r\nout = create(obj, resolution=0.5, rand_=0.0, type=1)\r\nwrite_data(\"./output/strip.data\", out)","category":"page"},{"location":"list.html#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"list.html","page":"Index","title":"Index","text":"Modules = [PDMesh]","category":"page"},{"location":"shapes.html#Shapes","page":"Shapes","title":"Shapes","text":"","category":"section"},{"location":"shapes.html","page":"Shapes","title":"Shapes","text":"PDMesh.Cone\nPDMesh.create(::PDMesh.Cone)\nPDMesh.Cuboid\nPDMesh.Cylinder\nPDMesh.Disk\nPDMesh.Sphere","category":"page"},{"location":"index.html#PDMesh.jl","page":"Home","title":"PDMesh.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"A Julia package for creating peridynamics mesh points.","category":"page"},{"location":"autodocs.html#Autodocs","page":"Autodocs","title":"Autodocs","text":"","category":"section"},{"location":"autodocs.html","page":"Autodocs","title":"Autodocs","text":"Modules = [PDMesh]","category":"page"},{"location":"autodocs.html#PDMesh.Cone","page":"Autodocs","title":"PDMesh.Cone","text":"Cone\n\nShape object of  type cone.\n\nArgs\n\n- radius : radius of cone\n- length : length of cone\n\nReturns\n\n- obj : Shape object **Cone**.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PDMesh.Cuboid","page":"Autodocs","title":"PDMesh.Cuboid","text":"Cuboid\n\nShape object of  type cuboid.\n\nArgs\n\n- bounds : min, max of cuboid for e.g. [-10 10; 0 3; -2 2]\n\nReturns\n\n- obj : Shape object **Cuboid**.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PDMesh.Cylinder","page":"Autodocs","title":"PDMesh.Cylinder","text":"Cylinder\n\nShape object of  type cylinder.\n\nArgs\n\n- radius : radius of cylinder\n- thickness : thickness of the wall of cylinder\n- length : length of cylinder\n\nReturns\n\n- obj : Shape object **Cylinder**.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PDMesh.Disk","page":"Autodocs","title":"PDMesh.Disk","text":"Disk\n\nShape object of  type disk.\n\nArgs\n\n- radius : radius of disk\n- thickness : length of disk\n\nReturns\n\n- obj : Shape object **disk**.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PDMesh.PostOpObj","page":"Autodocs","title":"PDMesh.PostOpObj","text":"PostOpObj\n\nCreate a post operation object (lazy) from object ( or post operation object)  and an operation. Operations will be applied while a create call.\n\nReturns\n\n- obj : Post operation object (lazy)\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PDMesh.Shape","page":"Autodocs","title":"PDMesh.Shape","text":"Shape\nAbstarct shape object.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PDMesh.Sphere","page":"Autodocs","title":"PDMesh.Sphere","text":"Sphere\n\nShape object of  type sphere.\n\nArgs\n\n- radius : radius of sphere\n\nReturns\n\n- obj : Shape object **sphere**.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PDMesh.changetype-Union{Tuple{T}, Tuple{T, Function, Int64}} where T<:Union{PostOpObj, Shape}","page":"Autodocs","title":"PDMesh.changetype","text":"changetype(obj::T, f::Function, ntype::Int64) where T\n\nChange mesh particle type for object using boolean array from function f.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMesh.create-Tuple{T} where T<:Shape","page":"Autodocs","title":"PDMesh.create","text":"create(shape::T; resolution=nothing, rand_=0.0, type::Int64=1) where T <: Shape\n\nAbstact function for creating Shape objects.\n\nReturns\n\n- X : Initial reference position \n- V : Initial velocity \n- Y : Initial position \n- volume : Volume per particle point \n- type : Type of particle point\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMesh.delete-Union{Tuple{T}, Tuple{T, Function}} where T","page":"Autodocs","title":"PDMesh.delete","text":"delete(obj::T, f::Function) where T\n\nDelete mesh particles for object using boolean array from function f.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMesh.move-Tuple{T} where T<:Union{PostOpObj, Shape}","page":"Autodocs","title":"PDMesh.move","text":"move(obj::T; by=[0.0, 0.0, 0.0]) where T\n\nMove mesh particles for object by given \"by\".\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMesh.rotate-Tuple{T} where T<:Union{PostOpObj, Shape}","page":"Autodocs","title":"PDMesh.rotate","text":"rotate(obj::T; angle=0.0, point=[0.0, 0.0, 0.0], vector_=[1.0, 0.0, 0.0]) where T <: Union{Shape, PostOpObj}\n\nRotate shape object by given angle about given vector and point.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMesh.velocity-Union{Tuple{T}, Tuple{T, Function, Any}} where T<:Union{PostOpObj, Shape}","page":"Autodocs","title":"PDMesh.velocity","text":"velocity(obj::T, f::Function, vel) where T\n\nChange velocity of particles for object using boolean array from function f.\n\n\n\n\n\n","category":"method"},{"location":"operations.html#Operations","page":"Operations","title":"Operations","text":"","category":"section"},{"location":"operations.html","page":"Operations","title":"Operations","text":"PDMesh.create\nPDMesh.changetype\nPDMesh.delete\nPDMesh.move\nPDMesh.rotate\nPDMesh.velocity","category":"page"}]
}
